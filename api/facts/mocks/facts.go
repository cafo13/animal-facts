// Code generated by MockGen. DO NOT EDIT.
// Source: facts/facts.go

// Package mock_facts is a generated GoMock package.
package mock_facts

import (
	reflect "reflect"

	database "github.com/cafo13/animal-facts/api/database"
	models "github.com/cafo13/animal-facts/api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFactHandler is a mock of FactHandler interface.
type MockFactHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFactHandlerMockRecorder
}

// MockFactHandlerMockRecorder is the mock recorder for MockFactHandler.
type MockFactHandlerMockRecorder struct {
	mock *MockFactHandler
}

// NewMockFactHandler creates a new mock instance.
func NewMockFactHandler(ctrl *gomock.Controller) *MockFactHandler {
	mock := &MockFactHandler{ctrl: ctrl}
	mock.recorder = &MockFactHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactHandler) EXPECT() *MockFactHandlerMockRecorder {
	return m.recorder
}

// CreateFact mocks base method.
func (m *MockFactHandler) CreateFact(fact *models.Fact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFact", fact)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFact indicates an expected call of CreateFact.
func (mr *MockFactHandlerMockRecorder) CreateFact(fact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFact", reflect.TypeOf((*MockFactHandler)(nil).CreateFact), fact)
}

// DatabaseFactToModelsFactWithID mocks base method.
func (m *MockFactHandler) DatabaseFactToModelsFactWithID(dbFact *database.Fact) *models.FactWithID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseFactToModelsFactWithID", dbFact)
	ret0, _ := ret[0].(*models.FactWithID)
	return ret0
}

// DatabaseFactToModelsFactWithID indicates an expected call of DatabaseFactToModelsFactWithID.
func (mr *MockFactHandlerMockRecorder) DatabaseFactToModelsFactWithID(dbFact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseFactToModelsFactWithID", reflect.TypeOf((*MockFactHandler)(nil).DatabaseFactToModelsFactWithID), dbFact)
}

// DeleteFact mocks base method.
func (m *MockFactHandler) DeleteFact(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFact", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFact indicates an expected call of DeleteFact.
func (mr *MockFactHandlerMockRecorder) DeleteFact(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFact", reflect.TypeOf((*MockFactHandler)(nil).DeleteFact), id)
}

// GetFactById mocks base method.
func (m *MockFactHandler) GetFactById(id uint) (*models.FactWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFactById", id)
	ret0, _ := ret[0].(*models.FactWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFactById indicates an expected call of GetFactById.
func (mr *MockFactHandlerMockRecorder) GetFactById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFactById", reflect.TypeOf((*MockFactHandler)(nil).GetFactById), id)
}

// GetRandomFact mocks base method.
func (m *MockFactHandler) GetRandomFact() (*models.FactWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomFact")
	ret0, _ := ret[0].(*models.FactWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomFact indicates an expected call of GetRandomFact.
func (mr *MockFactHandlerMockRecorder) GetRandomFact() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomFact", reflect.TypeOf((*MockFactHandler)(nil).GetRandomFact))
}

// ModelsFactToDatabaseFact mocks base method.
func (m *MockFactHandler) ModelsFactToDatabaseFact(fact *models.Fact) *database.Fact {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelsFactToDatabaseFact", fact)
	ret0, _ := ret[0].(*database.Fact)
	return ret0
}

// ModelsFactToDatabaseFact indicates an expected call of ModelsFactToDatabaseFact.
func (mr *MockFactHandlerMockRecorder) ModelsFactToDatabaseFact(fact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelsFactToDatabaseFact", reflect.TypeOf((*MockFactHandler)(nil).ModelsFactToDatabaseFact), fact)
}

// UpdateFact mocks base method.
func (m *MockFactHandler) UpdateFact(id uint, updatedFact *models.Fact) (*models.FactWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFact", id, updatedFact)
	ret0, _ := ret[0].(*models.FactWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFact indicates an expected call of UpdateFact.
func (mr *MockFactHandlerMockRecorder) UpdateFact(id, updatedFact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFact", reflect.TypeOf((*MockFactHandler)(nil).UpdateFact), id, updatedFact)
}
